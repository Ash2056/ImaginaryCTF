#!/usr/bin/env python3

from Crypto.Util.number import long_to_bytes
from random import randint
import sys
P1 = 8155490875222969420750576112997716887141340453460891337810920551180429703004550568193832682799084465393315521798432598139236992914963308998731811596206919
P2 = 11885624125128813660680697138338961909477606594900839188851873335783752045917361484618200086764717818694945513362636671626003687354605684469203131717879923
n = P1 * P2
y = 68961362722072530703826419262328445180017086349352658806957754435990062474012129234730448039535183989679030261614138753325720746667025253285107284794111174874748089561956719102087279846653340064026000842296905367458452719358638073136570664555790130912243996226275941249367950489470845980351462512958938159833

def phi(n_):
    assert n_ == n
    return (P1 - 1) * (P2 - 1)

def f(x, y):
    if y == 0:
        return 1
    if y == 1:
        assert x < n
        return x
    return ( f(pow(x,2,n), y//2) * x**(y&1) ) % n

def main():
    # flag = input("Enter flag: ")
    # flagnum = int.from_bytes(flag.encode(), 'big')
    flagnum = pow(y, -1, phi(n))

    for i in range(10):
        x = randint(1, n)
        if f(f(x,y), flagnum)^x:
            print("Nope...")
            exit()
    print("Correct!")
    print(long_to_bytes(flagnum).decode())

if __name__ == "__main__":
    sys.setrecursionlimit(1500)
    main()
